#!/usr/bin/env python3
# gen-passwords:
#   Render template files with random passwords.
#
#   Replacement delimiter is @, and passwords with the same name will
#   be the same for all template files.  '@@' renders a single '@'.
#
#   Examples: "@password", zz@{zzPassword}zz, alias@@host.email.com

from collections import defaultdict
import secrets
import string
import sys

# Template to output mappings.
template_outputs = {
    'lowsec.tmpl.nix': 'lowsec.nix'
}

# Characters used to generate passwords.
password_alphabet = string.ascii_letters + string.digits

# Length of generated password.
password_length = 16


class PasswordTemplate(string.Template):
    delimiter = '@'


def main():
    # Use the same dictionary for all templates.
    password_dict = defaultdict(gen_password)

    for in_name in template_outputs:
        out_name = template_outputs[in_name]
        print(f'Generating "{out_name}" from template "{in_name}"',
              file=sys.stderr)

        try:
            with open(in_name) as in_file:
                in_template = PasswordTemplate(in_file.read())
                out_data = in_template.substitute(password_dict)
                with open(out_name, 'w') as out_file:
                    print(out_data, file=out_file)
        except BaseException as err:
            sys.exit(err)


def gen_password():
    return ''.join(secrets.choice(password_alphabet)
                   for i in range(password_length))


if __name__ == "__main__":
    main()
